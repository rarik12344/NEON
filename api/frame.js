export default async function handler(req, res) {
  // –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
  const imageUrl = `https://i.ibb.co/NdV9qyFh/NEONLOTTERY.jpg?t=${Date.now()}`;
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–∞ (–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π)
  if (req.method === 'POST') {
    try {
      const body = JSON.parse(req.body);
      const buttonIndex = body.untrustedData?.buttonIndex;
      
      if (buttonIndex === 1) {
        return res.status(200).json({
          type: 'frame',
          frame: {
            version: 'vNext',
            image: imageUrl,
            buttons: [
              {
                label: 'üé´ Participate',
                action: 'post_redirect',
              }
            ],
            postUrl: `${process.env.BASE_URL}/api/frame?t=${Date.now()}`,
          }
        });
      }
    } catch (error) {
      console.error('Frame POST error:', error);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ GET-–∑–∞–ø—Ä–æ—Å–∞ (–ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –ø–æ–∫–∞–∑ Frame)
  res.status(200).json({
    type: 'frame',
    frame: {
      version: 'vNext',
      image: imageUrl,
      buttons: [
        {
          label: 'üé´ Participate',
          action: 'post_redirect',
        }
      ],
      postUrl: `${process.env.BASE_URL}/api/frame?t=${Date.now()}`,
    }
  });
}
