// api/frame.js
export default async function handler(req, res) {
  // 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  const HARDCODED_BASE_URL = "https://neon-xi.vercel.app"; // –ù–∞ —Å–ª—É—á–∞–π –ø—Ä–æ–±–ª–µ–º —Å env –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏
  const BASE_URL = process.env.BASE_URL || HARDCODED_BASE_URL;
  const TIMESTAMP = Date.now();
  
  // 2. URL —Ä–µ—Å—É—Ä—Å–æ–≤ —Å anti-cache –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
  const IMAGE_URL = `https://i.ibb.co/NdV9qyFh/NEONLOTTERY.jpg?t=${TIMESTAMP}`;
  const POST_URL = `${BASE_URL}/api/frame?t=${TIMESTAMP}`;
  
  // 3. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ Frame
  const frameResponse = {
    type: 'frame',
    frame: {
      version: 'vNext', // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è
      image: IMAGE_URL, // –ê–±—Å–æ–ª—é—Ç–Ω—ã–π URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      buttons: [{
        label: 'üé´ Participate', // –ú–∞–∫—Å–∏–º—É–º 4 –∫–Ω–æ–ø–∫–∏
        action: 'post_redirect' // –ò–ª–∏ 'post' –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
      }],
      postUrl: POST_URL, // –ê–±—Å–æ–ª—é—Ç–Ω—ã–π URL –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
      ogImage: IMAGE_URL, // –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      accepts: { // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        'x-frame-payload': true
      }
    }
  };

  // 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–∞ (–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
  if (req.method === 'POST') {
    try {
      // –ü–∞—Ä—Å–∏–Ω–≥ –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
      const body = typeof req.body === 'string' ? JSON.parse(req.body) : req.body;
      const buttonIndex = body?.untrustedData?.buttonIndex;
      
      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      console.log('Received POST:', {
        buttonIndex,
        body: JSON.stringify(body, null, 2)
      });

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –∫–Ω–æ–ø–∫–∏
      if (buttonIndex === 1) {
        return res.status(200).json(frameResponse);
      }
    } catch (error) {
      console.error('Frame POST error:', error);
      return res.status(400).json({ error: 'Invalid request' });
    }
  }

  // 5. –û–±—Ä–∞–±–æ—Ç–∫–∞ GET-–∑–∞–ø—Ä–æ—Å–∞ (–ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ Frame)
  console.log('Serving GET frame');
  res.status(200).json(frameResponse);
}
