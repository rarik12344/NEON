// api/frame.js
export default async function handler(req, res) {
  // 1. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª)
  const CONFIG = {
    BASE_URL: "https://neon-xi.vercel.app",
    IMAGE: {
      url: "https://i.ibb.co/NdV9qyFh/NEONLOTTERY.jpg",
      aspectRatio: "1:1" // –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –¥–ª—è Frame
    },
    BUTTONS: [
      {
        label: "üé´ Participate",
        action: "post_redirect",
        target: "https://neon-xi.vercel.app/" // –ö—É–¥–∞ –≤–µ–¥–µ—Ç –∫–Ω–æ–ø–∫–∞
      }
    ]
  };

  // 2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è URL
  const timestamp = Date.now();
  const imageUrl = `${CONFIG.IMAGE.url}?t=${timestamp}`;
  const postUrl = `${CONFIG.BASE_URL}/api/frame?t=${timestamp}`;

  // 3. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
  const logRequest = () => {
    console.log(`[${new Date().toISOString()}] ${req.method} ${req.url}`);
    if (req.method === 'POST') {
      console.log('Body:', JSON.stringify(req.body, null, 2));
    }
  };

  // 4. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
  const buildFrame = () => ({
    type: 'frame',
    frame: {
      version: 'vNext',
      image: imageUrl,
      imageAspectRatio: CONFIG.IMAGE.aspectRatio,
      buttons: CONFIG.BUTTONS.map(btn => ({
        label: btn.label,
        action: btn.action,
        ...(btn.target ? { target: btn.target } : {})
      })),
      postUrl: postUrl,
      ogImage: imageUrl,
      accepts: { 'x-frame-payload': true }
    }
  });

  // 5. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
  try {
    logRequest();
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è POST-–∑–∞–ø—Ä–æ—Å–∞
    if (req.method === 'POST') {
      const body = typeof req.body === 'string' ? JSON.parse(req.body) : req.body;
      
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
      if (body?.untrustedData?.buttonIndex) {
        console.log(`Button ${body.untrustedData.buttonIndex} pressed`);
      }
    }

    // –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º Frame
    res.status(200).json(buildFrame());
    
  } catch (error) {
    console.error('Error:', error);
    res.status(200).json(buildFrame()); // –í–∞–∂–Ω–æ –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å Frame
  }
}
