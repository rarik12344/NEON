// api/webhook.js
export default async function handler(req, res) {
  // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ CORS –¥–ª—è preflight-–∑–∞–ø—Ä–æ—Å–æ–≤
  if (req.method === 'OPTIONS') {
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type, X-Farcaster-Frame-Signature');
    return res.status(200).end();
  }

  // –¢–æ–ª—å–∫–æ POST-–∑–∞–ø—Ä–æ—Å—ã
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const event = req.body;
    console.log('üì¶ Received Farcaster webhook event:', JSON.stringify(event, null, 2));

    // –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è production)
    const signature = req.headers['x-farcaster-frame-signature'];
    if (process.env.NODE_ENV === 'production' && !signature) {
      console.warn('‚ö†Ô∏è Missing frame signature');
      return res.status(401).json({ error: 'Unauthorized' });
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π Farcaster
    switch (event.type) {
      case 'frame_action':
        console.log(`üñº Frame action by ${event.actor?.fid} on ${new Date(event.timestamp).toISOString()}`);
        await handleFrameAction(event);
        break;

      case 'transaction':
        console.log(`üí∏ Transaction ${event.hash} (status: ${event.status})`);
        await handleTransaction(event);
        break;

      case 'user_action':
        console.log(`üë§ User action: ${event.action} by ${event.actor?.fid}`);
        await handleUserAction(event);
        break;

      case 'ping':
        console.log('üèì Ping received - webhook is active');
        break;

      default:
        console.warn(`‚ö†Ô∏è Unhandled event type: ${event.type}`);
    }

    // –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
    res.setHeader('Access-Control-Allow-Origin', '*');
    return res.status(200).json({ 
      success: true,
      processed_event: event.type,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('‚ùå Webhook error:', error);
    return res.status(500).json({ 
      error: 'Internal server error',
      details: error.message 
    });
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
async function handleFrameAction(event) {
  const { buttonIndex, inputText, fid } = event.data;
  console.log(`üîÑ Processing frame action: button ${buttonIndex}, input: "${inputText}" by user ${fid}`);

  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ:
  // 1. –ó–∞–ø–∏—Å—ã–≤–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  // 2. –û–±–Ω–æ–≤–ª—è—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ—Ä–µ–π–º–æ–≤
  // 3. –ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è
}

async function handleTransaction(event) {
  const { hash, status, chainId, to } = event.data;
  console.log(`üîÑ Processing tx ${hash} (status: ${status}) on chain ${chainId}`);

  if (to.toLowerCase() === process.env.NEXT_PUBLIC_CONTRACT_ADDRESS.toLowerCase()) {
    console.log('üé´ Contract interaction detected - processing lottery tickets...');
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–æ—Ç–µ—Ä–µ–∏
  }
}

async function handleUserAction(event) {
  const { action, fid } = event.data;
  console.log(`üîÑ Processing user action: ${action} by ${fid}`);

  // –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏:
  if (action === 'ticket_purchase') {
    console.log('üéüÔ∏è New ticket purchase detected');
    // –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∫—É–ø–∫–∏ –±–∏–ª–µ—Ç–æ–≤
  }
}
