import crypto from 'crypto';

const FRAME_SECRET = process.env.FRAME_SECRET;

function verifyWebhookSignature(body, signature) {
  if (!FRAME_SECRET) return true; // Skip verification in development
  
  const hmac = crypto.createHmac('sha256', FRAME_SECRET);
  hmac.update(JSON.stringify(body));
  const digest = hmac.digest('hex');
  
  return digest === signature;
}

export default async function handler(req, res) {
  // Handle CORS preflight
  if (req.method === 'OPTIONS') {
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type, X-Farcaster-Frame-Signature');
    return res.status(200).end();
  }

  // Only POST requests
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const event = req.body;
    const signature = req.headers['x-farcaster-frame-signature'];
    
    // Verify signature in production
    if (process.env.NODE_ENV === 'production' && !verifyWebhookSignature(event, signature)) {
      console.warn('‚ö†Ô∏è Invalid webhook signature');
      return res.status(401).json({ error: 'Unauthorized' });
    }

    console.log('üì¶ Received Farcaster event:', event.type);

    // Process different event types
    switch (event.type) {
      case 'frame_action':
        await handleFrameAction(event);
        break;
      case 'transaction':
        await handleTransaction(event);
        break;
      case 'user_action':
        await handleUserAction(event);
        break;
      case 'ping':
        console.log('üèì Ping received');
        break;
      default:
        console.warn(`‚ö†Ô∏è Unhandled event type: ${event.type}`);
    }

    // Success response
    res.setHeader('Access-Control-Allow-Origin', '*');
    return res.status(200).json({ 
      success: true,
      processed_event: event.type,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('‚ùå Webhook error:', error);
    return res.status(500).json({ 
      error: 'Internal server error',
      details: error.message 
    });
  }
}

async function handleFrameAction(event) {
  const { buttonIndex, fid, castId } = event.data;
  console.log(`üñº Frame action by ${fid} on cast ${castId?.castId} - button ${buttonIndex}`);
  
  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ:
  // 1. –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  // 2. –û–±–Ω–æ–≤–ª—è—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  // 3. –¢—Ä–∏–≥–≥–µ—Ä–∏—Ç—å –¥—Ä—É–≥–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
}

async function handleTransaction(event) {
  const { hash, status, chainId, to } = event.data;
  console.log(`üí∏ Transaction ${hash} (status: ${status}) on chain ${chainId}`);
  
  if (to?.toLowerCase() === process.env.NEXT_PUBLIC_CONTRACT_ADDRESS?.toLowerCase()) {
    console.log('üé´ Contract interaction detected');
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –±–∏–ª–µ—Ç–æ–≤
  }
}

async function handleUserAction(event) {
  const { action, fid } = event.data;
  console.log(`üë§ User action: ${action} by ${fid}`);
  
  if (action === 'ticket_purchase') {
    console.log('üéüÔ∏è New ticket purchase detected');
    // –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∫—É–ø–∫–∏ –±–∏–ª–µ—Ç–æ–≤
  }
}
